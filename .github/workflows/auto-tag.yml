name: Auto Tag on PR Merge

# Set permissions for the GITHUB_TOKEN
permissions:
  contents: write

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  create_tag:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository with full history
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history to access all commits and tags

      # 2. Set up Git user for tagging
      - name: Set up Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # 3. Get the latest tag
      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "Latest tag: $latest_tag"
          echo "::set-output name=latest_tag::$latest_tag"

      # 4. Gather commits since the last tag
      - name: Gather commits since last tag
        id: gather_commits
        run: |
          latest_tag=${{ steps.get_latest_tag.outputs.latest_tag }}

          if [ -z "$latest_tag" ]; then
            # If no tags exist, consider all commits
            commits=$(git log --pretty=format:"%s" )
          else
            # Get commits since the latest tag
            commits=$(git log ${latest_tag}..HEAD --pretty=format:"%s")
          fi

          echo "Commits since last tag:"
          echo "$commits"
          echo "::set-output name=commits::$commits"

      # 5. Determine the version bump based on commit messages
      - name: Determine version bump
        id: version_bump
        run: |
          commits="${{ steps.gather_commits.outputs.commits }}"

          bump="patch"  # Default bump

          while read -r line; do
            if [[ "$line" =~ ^feat(\(.*\))?: ]]; then
              bump="minor"
              break
            elif [[ "$line" =~ ^fix(\(.*\))?: ]]; then
              if [ "$bump" != "minor" ]; then
                bump="patch"
              fi
            elif [[ "$line" =~ BREAKING\ CHANGE: ]]; then
              bump="major"
              break
            fi
          done <<< "$commits"

          echo "Version bump: $bump"
          echo "::set-output name=bump::$bump"

      # 6. Determine the next version based on the bump
      - name: Get next version
        id: next_version
        run: |
          bump=${{ steps.version_bump.outputs.bump }}
          latest_tag=${{ steps.get_latest_tag.outputs.latest_tag }}

          if [ -z "$latest_tag" ]; then
            # No existing tags, start at v0.1.0
            major=0
            minor=1
            patch=0
          else
            # Extract version numbers from the latest tag
            major=$(echo $latest_tag | cut -d. -f1 | tr -d 'v')
            minor=$(echo $latest_tag | cut -d. -f2)
            patch=$(echo $latest_tag | cut -d. -f3)
          fi

          case "$bump" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac

          new_tag="v$major.$minor.$patch"
          echo "Next tag: $new_tag"
          echo "::set-output name=new_tag::$new_tag"

      # 7. Create and push the new tag
      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          new_tag=${{ steps.next_version.outputs.new_tag }}
          git tag $new_tag
          git push origin $new_tag

      # 8. (Optional) Create a GitHub Release
      # - name: Create Release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     tag_name: ${{ steps.next_version.outputs.new_tag }}
      #     name: Release ${{ steps.next_version.outputs.new_tag }}
      #     body: |
      #       ### Changes
      #       ${{ steps.gather_commits.outputs.commits }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
